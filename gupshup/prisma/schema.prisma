// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageDirection {
  INCOMING
  OUTGOING
}


model User {
  id String @default(uuid()) @id
  name String 
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentMessages Chat[] @relation("SendMessages")
  recieveMessages Chat[] @relation("ReceivedMessages")
  contacts MyContacts[] @relation("OwnerContacts")

  @@index([email])
}

model Chat{
  id String @default(uuid()) @id
  content String
  
  senderId String?
  sender User? @relation("SendMessages",fields: [senderId],references: [id])
  
  receiverId String?
  receiver User? @relation("ReceivedMessages",fields: [receiverId],references: [id])

  direction MessageDirection @default(OUTGOING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seen  Boolean  @default(false)
  @@index([senderId, createdAt]) // Optimize queries for fetching sent messages
  @@index([receiverId, createdAt]) // Optimize queries for fetching received messages

}

model MyContacts {
  id String @default(uuid()) @id

  
  ownerId String
  owner User @relation("OwnerContacts", fields: [ownerId], references: [id])

  contactGmail String?
  contactName String?

  isContactRegistered Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  @@unique([ownerId, contactGmail]) // Prevent duplicate contacts for an owner
  @@index([ownerId]) // Optimize queries by owner
  @@index([contactGmail]) // Optimize queries by contact email
  
}